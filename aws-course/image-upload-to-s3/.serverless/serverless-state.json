{
  "service": {
    "service": "Serverless",
    "serviceObject": {
      "name": "Serverless"
    },
    "provider": {
      "name": "aws",
      "stage": "dev",
      "region": "us-east-1",
      "runtime": "nodejs16.x",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetPresignedUrlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Serverless-dev-getPresignedUrl"
            }
          },
          "GetPhotoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Serverless-dev-getPhoto"
            }
          },
          "SignUpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Serverless-dev-signUp"
            }
          },
          "PreSignUpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Serverless-dev-preSignUp"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Serverless-dev-login"
            }
          },
          "PutItemsDbLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Serverless-dev-putItemsDb"
            }
          },
          "DeletePhotoS3LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Serverless-dev-deletePhotoS3"
            }
          },
          "DeletePhotoDynamoDbLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Serverless-dev-deletePhotoDynamoDb"
            }
          },
          "RefreshTokensLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Serverless-dev-refreshTokens"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "Serverless",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Serverless-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Serverless-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "Serverless",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetPresignedUrlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z/Serverless.zip"
              },
              "Handler": "dist/getPresignedUrl.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "Serverless-dev-getPresignedUrl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
                  "SECRETACCESSKEY": "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",
                  "REGION": "us-east-1",
                  "BUCKET_NAME": {
                    "Ref": "S3Bucket"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPresignedUrlLogGroup"
            ]
          },
          "GetPhotoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z/Serverless.zip"
              },
              "Handler": "dist/getPhoto.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "Serverless-dev-getPhoto",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
                  "SECRETACCESSKEY": "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",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPhotoLogGroup"
            ]
          },
          "SignUpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z/Serverless.zip"
              },
              "Handler": "dist/signUp.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "Serverless-dev-signUp",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USER_POOL_ID": {
                    "Ref": "usersCognito"
                  },
                  "APP_CLIENT_ID": {
                    "Ref": "usersCognitoClient"
                  },
                  "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
                  "SECRETACCESSKEY": "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",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignUpLogGroup"
            ]
          },
          "PreSignUpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z/Serverless.zip"
              },
              "Handler": "dist/preSignUp.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "Serverless-dev-preSignUp",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PreSignUpLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z/Serverless.zip"
              },
              "Handler": "dist/login.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "Serverless-dev-login",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USER_POOL_ID": {
                    "Ref": "usersCognito"
                  },
                  "APP_CLIENT_ID": {
                    "Ref": "usersCognitoClient"
                  },
                  "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
                  "SECRETACCESSKEY": "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",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "PutItemsDbLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z/Serverless.zip"
              },
              "Handler": "dist/putItemsDb.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "Serverless-dev-putItemsDb",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
                  "SECRETACCESSKEY": "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",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PutItemsDbLogGroup"
            ]
          },
          "DeletePhotoS3LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z/Serverless.zip"
              },
              "Handler": "dist/deletePhotoS3.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "Serverless-dev-deletePhotoS3",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
                  "SECRETACCESSKEY": "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",
                  "REGION": "us-east-1",
                  "BUCKET_NAME": {
                    "Ref": "S3Bucket"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeletePhotoS3LogGroup"
            ]
          },
          "DeletePhotoDynamoDbLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z/Serverless.zip"
              },
              "Handler": "dist/deletePhotoDynamoDb.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "Serverless-dev-deletePhotoDynamoDb",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
                  "SECRETACCESSKEY": "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",
                  "REGION": "us-east-1",
                  "TABLE_NAME": {
                    "Ref": "usersDynamoDb"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeletePhotoDynamoDbLogGroup"
            ]
          },
          "RefreshTokensLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z/Serverless.zip"
              },
              "Handler": "dist/refreshTokens.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "Serverless-dev-refreshTokens",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USER_POOL_ID": {
                    "Ref": "usersCognito"
                  },
                  "APP_CLIENT_ID": {
                    "Ref": "usersCognitoClient"
                  },
                  "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
                  "SECRETACCESSKEY": "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",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RefreshTokensLogGroup"
            ]
          },
          "GetPresignedUrlLambdaVersionnbEUrhRM02vcMxz1bFIUybGbNhToaWDDfINUfglfeQw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPresignedUrlLambdaFunction"
              },
              "CodeSha256": "Ou3cUSaEjJ9om6axT4/BnBr3nxtusCb8ulCDspHGJjk="
            }
          },
          "GetPhotoLambdaVersion2fQ8gHLAhRSHQ0MmaShpQekqrQhsAwKGDiH9KZFaA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPhotoLambdaFunction"
              },
              "CodeSha256": "Ou3cUSaEjJ9om6axT4/BnBr3nxtusCb8ulCDspHGJjk="
            }
          },
          "SignUpLambdaVersion7KZK0TUjx3Av5d0bD6HPQoKqHbwtQwqZ339vo44KYko": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignUpLambdaFunction"
              },
              "CodeSha256": "Ou3cUSaEjJ9om6axT4/BnBr3nxtusCb8ulCDspHGJjk="
            }
          },
          "PreSignUpLambdaVersionMsih21cHlRkwEBBaX6lNUkSsmdN5iz6UPYcL3fiJE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PreSignUpLambdaFunction"
              },
              "CodeSha256": "Ou3cUSaEjJ9om6axT4/BnBr3nxtusCb8ulCDspHGJjk="
            }
          },
          "LoginLambdaVersionabZMqaXgLNwp8mj7kr5fQKZAtCkMhaD927OdQOq8Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "Ou3cUSaEjJ9om6axT4/BnBr3nxtusCb8ulCDspHGJjk="
            }
          },
          "PutItemsDbLambdaVersionwzJV0uaYpoQJTV5CpFRQJUV5c45mDNYSqMH5iAPjQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PutItemsDbLambdaFunction"
              },
              "CodeSha256": "Ou3cUSaEjJ9om6axT4/BnBr3nxtusCb8ulCDspHGJjk="
            }
          },
          "DeletePhotoS3LambdaVersionKaLLs72E3wOozPPllHGkjGWuwq8mWT4OowG1NvXvrAA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeletePhotoS3LambdaFunction"
              },
              "CodeSha256": "Ou3cUSaEjJ9om6axT4/BnBr3nxtusCb8ulCDspHGJjk="
            }
          },
          "DeletePhotoDynamoDbLambdaVersionXR5tiuL0Ekei6KAO6V3Dm7guUBwBc6bViSHgDdANuNA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeletePhotoDynamoDbLambdaFunction"
              },
              "CodeSha256": "Ou3cUSaEjJ9om6axT4/BnBr3nxtusCb8ulCDspHGJjk="
            }
          },
          "RefreshTokensLambdaVersionICDd3GHe3jRLUDy8uveaGmrs4OSiNLOBOvDN4lO5WA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RefreshTokensLambdaFunction"
              },
              "CodeSha256": "Ou3cUSaEjJ9om6axT4/BnBr3nxtusCb8ulCDspHGJjk="
            }
          },
          "PutItemsDbCustomS31": {
            "Type": "Custom::S3",
            "Version": 1,
            "DependsOn": [
              "PutItemsDbLambdaFunction",
              "CustomDashresourceDashexistingDashs3LambdaFunction"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashexistingDashs3LambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "Serverless-dev-putItemsDb",
              "BucketName": "image-uploader-internship",
              "BucketConfigs": [
                {
                  "Event": "s3:ObjectCreated:*",
                  "Rules": []
                }
              ]
            }
          },
          "DeletePhotoDynamoDbCustomS31": {
            "Type": "Custom::S3",
            "Version": 1,
            "DependsOn": [
              "DeletePhotoDynamoDbLambdaFunction",
              "CustomDashresourceDashexistingDashs3LambdaFunction",
              "PutItemsDbCustomS31"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashexistingDashs3LambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "Serverless-dev-deletePhotoDynamoDb",
              "BucketName": "image-uploader-internship",
              "BucketConfigs": [
                {
                  "Event": "s3:ObjectRemoved:Delete",
                  "Rules": []
                }
              ]
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "Serverless",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "s3",
                              "",
                              "",
                              "image-uploader-internship"
                            ]
                          ]
                        },
                        "Action": [
                          "s3:PutBucketNotification",
                          "s3:GetBucketNotification"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "s3",
                              "",
                              "",
                              "image-uploader-internship"
                            ]
                          ]
                        },
                        "Action": [
                          "s3:PutBucketNotification",
                          "s3:GetBucketNotification"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "lambda",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "function",
                              "*"
                            ]
                          ]
                        },
                        "Action": [
                          "lambda:AddPermission",
                          "lambda:RemovePermission"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": "*",
                        "Action": [
                          "cognito-idp:ListUserPools",
                          "cognito-idp:DescribeUserPool",
                          "cognito-idp:UpdateUserPool"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Sub": "arn:${AWS::Partition}:lambda:*:*:function:Serverless-dev-preSignUp"
                        },
                        "Action": [
                          "lambda:AddPermission",
                          "lambda:RemovePermission"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Sub": "arn:${AWS::Partition}:iam::*:role/*"
                        },
                        "Action": [
                          "iam:PassRole"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashexistingDashs3LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z/custom-resources.zip"
              },
              "FunctionName": "Serverless-dev-custom-resource-existing-s3",
              "Handler": "s3/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs14.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-Serverless",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceGeturl": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getUrl",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetphoto": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getPhoto",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSignup": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "signUp",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletephoto": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "deletePhoto",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRefresh": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "refresh",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGeturlGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGeturl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPresignedUrlLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodGetphotoGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetphoto"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPhotoLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodSignupPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSignup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignUpLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SignUpLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeletephotoPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeletephoto"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeletePhotoS3LambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodRefreshGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRefresh"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RefreshTokensLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RefreshTokensLambdaPermissionApiGateway"
            ]
          },
          "AuthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Bearer",
              "Name": "authorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Type": "COGNITO_USER_POOLS",
              "ProviderARNs": [
                {
                  "Fn::GetAtt": [
                    "usersCognito",
                    "Arn"
                  ]
                }
              ]
            }
          },
          "ApiGatewayDeployment1666856007713": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodGeturlGet",
              "ApiGatewayMethodGetphotoGet",
              "ApiGatewayMethodSignupPost",
              "ApiGatewayMethodLoginPost",
              "ApiGatewayMethodDeletephotoPost",
              "ApiGatewayMethodRefreshGet"
            ]
          },
          "GetPresignedUrlLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPresignedUrlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPhotoLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPhotoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SignUpLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignUpLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeletePhotoS3LambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeletePhotoS3LambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RefreshTokensLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshTokensLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PreSignUpCustomCognitoUserPool1": {
            "Type": "Custom::CognitoUserPool",
            "Version": 1,
            "DependsOn": [
              "PreSignUpLambdaFunction",
              "CustomDashresourceDashexistingDashcupLambdaFunction"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashexistingDashcupLambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "Serverless-dev-preSignUp",
              "UserPoolName": "Users",
              "UserPoolConfigs": [
                {
                  "Trigger": "PreSignUp"
                }
              ]
            }
          },
          "CustomDashresourceDashexistingDashcupLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z/custom-resources.zip"
              },
              "FunctionName": "Serverless-dev-custom-resource-existing-cup",
              "Handler": "cognito-user-pool/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs14.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "usersDynamoDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "usersTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "user_name",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "user_name",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              }
            }
          },
          "usersCognito": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [
                "email"
              ],
              "MfaConfiguration": "OFF",
              "UserPoolName": "Users"
            }
          },
          "usersCognitoClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ExplicitAuthFlows": [
                "ALLOW_USER_PASSWORD_AUTH",
                "ALLOW_REFRESH_TOKEN_AUTH"
              ],
              "ClientName": "usersCognitoClient",
              "UserPoolId": {
                "Ref": "usersCognito"
              },
              "TokenValidityUnits": {
                "IdToken": "hours",
                "RefreshToken": "days"
              },
              "IdTokenValidity": 1,
              "RefreshTokenValidity": 3650
            }
          },
          "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "image-uploader-internship",
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": false
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-Serverless-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetPresignedUrlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPresignedUrlLambdaVersionnbEUrhRM02vcMxz1bFIUybGbNhToaWDDfINUfglfeQw"
            },
            "Export": {
              "Name": "sls-Serverless-dev-GetPresignedUrlLambdaFunctionQualifiedArn"
            }
          },
          "GetPhotoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPhotoLambdaVersion2fQ8gHLAhRSHQ0MmaShpQekqrQhsAwKGDiH9KZFaA"
            },
            "Export": {
              "Name": "sls-Serverless-dev-GetPhotoLambdaFunctionQualifiedArn"
            }
          },
          "SignUpLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignUpLambdaVersion7KZK0TUjx3Av5d0bD6HPQoKqHbwtQwqZ339vo44KYko"
            },
            "Export": {
              "Name": "sls-Serverless-dev-SignUpLambdaFunctionQualifiedArn"
            }
          },
          "PreSignUpLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PreSignUpLambdaVersionMsih21cHlRkwEBBaX6lNUkSsmdN5iz6UPYcL3fiJE"
            },
            "Export": {
              "Name": "sls-Serverless-dev-PreSignUpLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionabZMqaXgLNwp8mj7kr5fQKZAtCkMhaD927OdQOq8Y"
            },
            "Export": {
              "Name": "sls-Serverless-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "PutItemsDbLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PutItemsDbLambdaVersionwzJV0uaYpoQJTV5CpFRQJUV5c45mDNYSqMH5iAPjQ"
            },
            "Export": {
              "Name": "sls-Serverless-dev-PutItemsDbLambdaFunctionQualifiedArn"
            }
          },
          "DeletePhotoS3LambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeletePhotoS3LambdaVersionKaLLs72E3wOozPPllHGkjGWuwq8mWT4OowG1NvXvrAA"
            },
            "Export": {
              "Name": "sls-Serverless-dev-DeletePhotoS3LambdaFunctionQualifiedArn"
            }
          },
          "DeletePhotoDynamoDbLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeletePhotoDynamoDbLambdaVersionXR5tiuL0Ekei6KAO6V3Dm7guUBwBc6bViSHgDdANuNA"
            },
            "Export": {
              "Name": "sls-Serverless-dev-DeletePhotoDynamoDbLambdaFunctionQualifiedArn"
            }
          },
          "RefreshTokensLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RefreshTokensLambdaVersionICDd3GHe3jRLUDy8uveaGmrs4OSiNLOBOvDN4lO5WA"
            },
            "Export": {
              "Name": "sls-Serverless-dev-RefreshTokensLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-Serverless-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "getPresignedUrl": {
        "handler": "dist/getPresignedUrl.handler",
        "events": [
          {
            "http": {
              "path": "getUrl",
              "method": "get",
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "usersCognito",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Bearer",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
          "SECRETACCESSKEY": "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",
          "REGION": "us-east-1",
          "BUCKET_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetPresignedUrlLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"BUCKET_NAME\"]"
          }
        },
        "name": "Serverless-dev-getPresignedUrl",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetPresignedUrlLambdaVersionnbEUrhRM02vcMxz1bFIUybGbNhToaWDDfINUfglfeQw"
      },
      "getPhoto": {
        "handler": "dist/getPhoto.handler",
        "events": [
          {
            "http": {
              "path": "getPhoto",
              "method": "get",
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "usersCognito",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Bearer",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
          "SECRETACCESSKEY": "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",
          "REGION": "us-east-1"
        },
        "name": "Serverless-dev-getPhoto",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetPhotoLambdaVersion2fQ8gHLAhRSHQ0MmaShpQekqrQhsAwKGDiH9KZFaA"
      },
      "signUp": {
        "handler": "dist/signUp.handler",
        "events": [
          {
            "http": {
              "path": "signUp",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "USER_POOL_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SignUpLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"USER_POOL_ID\"]"
          },
          "APP_CLIENT_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SignUpLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"APP_CLIENT_ID\"]"
          },
          "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
          "SECRETACCESSKEY": "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",
          "REGION": "us-east-1"
        },
        "name": "Serverless-dev-signUp",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "SignUpLambdaVersion7KZK0TUjx3Av5d0bD6HPQoKqHbwtQwqZ339vo44KYko"
      },
      "preSignUp": {
        "handler": "dist/preSignUp.handler",
        "events": [
          {
            "cognitoUserPool": {
              "pool": "Users",
              "trigger": "PreSignUp",
              "existing": true
            }
          }
        ],
        "name": "Serverless-dev-preSignUp",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "PreSignUpLambdaVersionMsih21cHlRkwEBBaX6lNUkSsmdN5iz6UPYcL3fiJE"
      },
      "login": {
        "handler": "dist/login.handler",
        "events": [
          {
            "http": {
              "path": "login",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "USER_POOL_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"USER_POOL_ID\"]"
          },
          "APP_CLIENT_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"APP_CLIENT_ID\"]"
          },
          "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
          "SECRETACCESSKEY": "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",
          "REGION": "us-east-1"
        },
        "name": "Serverless-dev-login",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersionabZMqaXgLNwp8mj7kr5fQKZAtCkMhaD927OdQOq8Y"
      },
      "putItemsDb": {
        "handler": "dist/putItemsDb.handler",
        "events": [
          {
            "s3": {
              "bucket": "image-uploader-internship",
              "event": "s3:ObjectCreated:*",
              "existing": true
            }
          }
        ],
        "environment": {
          "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
          "SECRETACCESSKEY": "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",
          "REGION": "us-east-1"
        },
        "name": "Serverless-dev-putItemsDb",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "PutItemsDbLambdaVersionwzJV0uaYpoQJTV5CpFRQJUV5c45mDNYSqMH5iAPjQ"
      },
      "deletePhotoS3": {
        "handler": "dist/deletePhotoS3.handler",
        "events": [
          {
            "http": {
              "path": "deletePhoto",
              "method": "post",
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "usersCognito",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Bearer",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
          "SECRETACCESSKEY": "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",
          "REGION": "us-east-1",
          "BUCKET_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeletePhotoS3LambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"BUCKET_NAME\"]"
          }
        },
        "name": "Serverless-dev-deletePhotoS3",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeletePhotoS3LambdaVersionKaLLs72E3wOozPPllHGkjGWuwq8mWT4OowG1NvXvrAA"
      },
      "deletePhotoDynamoDb": {
        "handler": "dist/deletePhotoDynamoDb.handler",
        "events": [
          {
            "s3": {
              "bucket": "image-uploader-internship",
              "event": "s3:ObjectRemoved:Delete",
              "existing": true
            }
          }
        ],
        "environment": {
          "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
          "SECRETACCESSKEY": "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",
          "REGION": "us-east-1",
          "TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeletePhotoDynamoDbLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"TABLE_NAME\"]"
          }
        },
        "name": "Serverless-dev-deletePhotoDynamoDb",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeletePhotoDynamoDbLambdaVersionXR5tiuL0Ekei6KAO6V3Dm7guUBwBc6bViSHgDdANuNA"
      },
      "refreshTokens": {
        "handler": "dist/refreshTokens.handler",
        "events": [
          {
            "http": {
              "path": "refresh",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "USER_POOL_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RefreshTokensLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"USER_POOL_ID\"]"
          },
          "APP_CLIENT_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RefreshTokensLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"APP_CLIENT_ID\"]"
          },
          "ACCESSKEYID": "AKIA4HEUM2VF5Z6EKHI7",
          "SECRETACCESSKEY": "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",
          "REGION": "us-east-1"
        },
        "name": "Serverless-dev-refreshTokens",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "RefreshTokensLambdaVersionICDd3GHe3jRLUDy8uveaGmrs4OSiNLOBOvDN4lO5WA"
      }
    },
    "resources": {
      "Resources": {
        "usersDynamoDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "usersTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "user_name",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "user_name",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          }
        },
        "usersCognito": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UsernameAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [
              "email"
            ],
            "MfaConfiguration": "OFF",
            "UserPoolName": "Users"
          }
        },
        "usersCognitoClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ExplicitAuthFlows": [
              "ALLOW_USER_PASSWORD_AUTH",
              "ALLOW_REFRESH_TOKEN_AUTH"
            ],
            "ClientName": "usersCognitoClient",
            "UserPoolId": {
              "Ref": "usersCognito"
            },
            "TokenValidityUnits": {
              "IdToken": "hours",
              "RefreshToken": "days"
            },
            "IdTokenValidity": 1,
            "RefreshTokenValidity": 3650
          }
        },
        "S3Bucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "image-uploader-internship",
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": false
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "Serverless",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "patterns": [
          "!src",
          "!tsconfig.json",
          "!.serverless"
        ],
        "artifactsS3KeyDirname": "serverless/Serverless/dev/code-artifacts",
        "artifact": "/Users/aleksandr/Projects/lambda-internship/aws-course/image-upload-to-s3/.serverless/Serverless.zip",
        "artifactDirectoryName": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/aleksandr/Projects/lambda-internship/aws-course/image-upload-to-s3/.serverless/Serverless.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/Serverless/dev/1666856011464-2022-10-27T07:33:31.464Z",
    "artifact": "Serverless.zip"
  }
}